{"version":3,"file":"managementClient.js","sourceRoot":"","sources":["../../src/managementClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuid } from \"uuid\";\nimport {\n  Constants,\n  RequestResponseLink,\n  RetryConfig,\n  RetryOperationType,\n  RetryOptions,\n  SendRequestOptions,\n  defaultCancellableLock,\n  isSasTokenProvider,\n  retry,\n  translate\n} from \"@azure/core-amqp\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport {\n  EventContext,\n  Message,\n  ReceiverEvents,\n  ReceiverOptions,\n  SenderEvents,\n  SenderOptions,\n  generate_uuid\n} from \"rhea-promise\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { LinkEntity } from \"./linkEntity\";\nimport { logErrorStackTrace, logger } from \"./log\";\nimport { getRetryAttemptTimeoutInMs } from \"./util/retries\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { throwErrorIfConnectionClosed, throwTypeErrorIfParameterMissing } from \"./util/error\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { OperationOptions } from \"./util/operationOptions\";\nimport { createEventHubSpan } from \"./diagnostics/tracing\";\n\n/**\n * Describes the runtime information of an Event Hub.\n */\nexport interface EventHubProperties {\n  /**\n   * The name of the event hub.\n   */\n  name: string;\n  /**\n   * The date and time the hub was created in UTC.\n   */\n  createdOn: Date;\n  /**\n   * The slice of string partition identifiers.\n   */\n  partitionIds: string[];\n}\n\n/**\n * Describes the runtime information of an EventHub Partition.\n */\nexport interface PartitionProperties {\n  /**\n   * The name of the Event Hub.\n   */\n  eventHubName: string;\n  /**\n   * Identifier of the partition within the Event Hub.\n   */\n  partitionId: string;\n  /**\n   * The starting sequence number of the partition's message log.\n   */\n  beginningSequenceNumber: number;\n  /**\n   * The last sequence number of the partition's message log.\n   */\n  lastEnqueuedSequenceNumber: number;\n  /**\n   * The offset of the last enqueued message in the partition's message log.\n   */\n  lastEnqueuedOffset: number;\n  /**\n   * The time of the last enqueued message in the partition's message log in UTC.\n   */\n  lastEnqueuedOnUtc: Date;\n  /**\n   * Indicates whether the partition is empty.\n   */\n  isEmpty: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ManagementClientOptions {\n  address?: string;\n  audience?: string;\n}\n\n/**\n * @internal\n * Descibes the EventHubs Management Client that talks\n * to the $management endpoint over AMQP connection.\n */\nexport class ManagementClient extends LinkEntity {\n  readonly managementLock: string = `${Constants.managementRequestKey}-${uuid()}`;\n  /**\n   * The name/path of the entity (hub name) for which the management\n   * request needs to be made.\n   */\n  entityPath: string;\n  /**\n   * The reply to Guid for the management client.\n   */\n  replyTo: string = uuid();\n  /**\n   * $management sender, receiver on the same session.\n   */\n  private _mgmtReqResLink?: RequestResponseLink;\n\n  /**\n   * Instantiates the management client.\n   * @hidden\n   * @param context - The connection context.\n   * @param address - The address for the management endpoint. For IotHub it will be\n   * `/messages/events/$management`.\n   */\n  constructor(context: ConnectionContext, options?: ManagementClientOptions) {\n    super(context, {\n      address: options && options.address ? options.address : Constants.management,\n      audience:\n        options && options.audience ? options.audience : context.config.getManagementAudience()\n    });\n    this._context = context;\n    this.entityPath = context.config.entityPath as string;\n  }\n\n  /**\n   * Gets the security token for the management application properties.\n   * @internal\n   */\n  async getSecurityToken(): Promise<AccessToken | null> {\n    if (isSasTokenProvider(this._context.tokenCredential)) {\n      // the security_token has the $management address removed from the end of the audience\n      // expected audience: sb://fully.qualified.namespace/event-hub-name/$management\n      const audienceParts = this.audience.split(\"/\");\n      // for management links, address should be '$management'\n      if (audienceParts[audienceParts.length - 1] === this.address) {\n        audienceParts.pop();\n      }\n      const audience = audienceParts.join(\"/\");\n      return this._context.tokenCredential.getToken(audience);\n    }\n\n    // aad credentials use the aad scope\n    return this._context.tokenCredential.getToken(Constants.aadEventHubsScope);\n  }\n\n  /**\n   * Provides the eventhub runtime information.\n   * @hidden\n   */\n  async getEventHubProperties(\n    options: OperationOptions & { retryOptions?: RetryOptions } = {}\n  ): Promise<EventHubProperties> {\n    throwErrorIfConnectionClosed(this._context);\n    const { span: clientSpan } = createEventHubSpan(\n      \"getEventHubProperties\",\n      options,\n      this._context.config\n    );\n\n    try {\n      const securityToken = await this.getSecurityToken();\n      const request: Message = {\n        body: Buffer.from(JSON.stringify([])),\n        message_id: uuid(),\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.readOperation,\n          name: this.entityPath as string,\n          type: `${Constants.vendorString}:${Constants.eventHub}`,\n          security_token: securityToken?.token\n        }\n      };\n\n      const info: any = await this._makeManagementRequest(request, {\n        ...options,\n        requestName: \"getHubRuntimeInformation\"\n      });\n      const runtimeInfo: EventHubProperties = {\n        name: info.name,\n        createdOn: new Date(info.created_at),\n        partitionIds: info.partition_ids\n      };\n      logger.verbose(\"[%s] The hub runtime info is: %O\", this._context.connectionId, runtimeInfo);\n\n      clientSpan.setStatus({ code: SpanStatusCode.OK });\n      return runtimeInfo;\n    } catch (error) {\n      clientSpan.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error.message\n      });\n      logger.warning(\n        `An error occurred while getting the hub runtime information: ${error?.name}: ${error?.message}`\n      );\n      logErrorStackTrace(error);\n      throw error;\n    } finally {\n      clientSpan.end();\n    }\n  }\n\n  /**\n   * Provides information about the specified partition.\n   * @hidden\n   * @param partitionId - Partition ID for which partition information is required.\n   */\n  async getPartitionProperties(\n    partitionId: string,\n    options: OperationOptions & { retryOptions?: RetryOptions } = {}\n  ): Promise<PartitionProperties> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"getPartitionProperties\",\n      \"partitionId\",\n      partitionId\n    );\n    partitionId = String(partitionId);\n\n    const { span: clientSpan } = createEventHubSpan(\n      \"getPartitionProperties\",\n      options,\n      this._context.config\n    );\n\n    try {\n      const securityToken = await this.getSecurityToken();\n      const request: Message = {\n        body: Buffer.from(JSON.stringify([])),\n        message_id: uuid(),\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.readOperation,\n          name: this.entityPath as string,\n          type: `${Constants.vendorString}:${Constants.partition}`,\n          partition: `${partitionId}`,\n          security_token: securityToken?.token\n        }\n      };\n\n      const info: any = await this._makeManagementRequest(request, {\n        ...options,\n        requestName: \"getPartitionInformation\"\n      });\n\n      const partitionInfo: PartitionProperties = {\n        beginningSequenceNumber: info.begin_sequence_number,\n        eventHubName: info.name,\n        lastEnqueuedOffset: info.last_enqueued_offset,\n        lastEnqueuedOnUtc: new Date(info.last_enqueued_time_utc),\n        lastEnqueuedSequenceNumber: info.last_enqueued_sequence_number,\n        partitionId: info.partition,\n        isEmpty: info.is_partition_empty\n      };\n      logger.verbose(\"[%s] The partition info is: %O.\", this._context.connectionId, partitionInfo);\n\n      clientSpan.setStatus({ code: SpanStatusCode.OK });\n\n      return partitionInfo;\n    } catch (error) {\n      clientSpan.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error.message\n      });\n      logger.warning(\n        `An error occurred while getting the partition information: ${error?.name}: ${error?.message}`\n      );\n      logErrorStackTrace(error);\n      throw error;\n    } finally {\n      clientSpan.end();\n    }\n  }\n\n  /**\n   * Closes the AMQP management session to the Event Hub for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @hidden\n   */\n  async close(): Promise<void> {\n    try {\n      // Always clear the timeout, as the isOpen check may report\n      // false without ever having cleared the timeout otherwise.\n      clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\n      if (this._isMgmtRequestResponseLinkOpen()) {\n        const mgmtLink = this._mgmtReqResLink;\n        this._mgmtReqResLink = undefined;\n        await mgmtLink!.close();\n        logger.info(\"Successfully closed the management session.\");\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the management session: ${err?.name}: ${err?.message}`;\n      logger.warning(msg);\n      logErrorStackTrace(err);\n      throw new Error(msg);\n    }\n  }\n\n  private async _init({\n    abortSignal,\n    timeoutInMs\n  }: {\n    abortSignal: AbortSignalLike | undefined;\n    timeoutInMs: number;\n  }): Promise<void> {\n    try {\n      if (!this._isMgmtRequestResponseLinkOpen()) {\n        // Wait for the connectionContext to be ready to open the link.\n        await this._context.readyToOpenLink();\n        await this._negotiateClaim({ setTokenRenewal: false, abortSignal, timeoutInMs });\n        const rxopt: ReceiverOptions = {\n          source: { address: this.address },\n          name: this.replyTo,\n          target: { address: this.replyTo },\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            logger.verbose(\n              \"[%s] An error occurred on the session for request/response links for \" +\n                \"$management: %O\",\n              id,\n              ehError\n            );\n          }\n        };\n        const sropt: SenderOptions = {\n          target: { address: this.address }\n        };\n        logger.verbose(\n          \"[%s] Creating sender/receiver links on a session for $management endpoint with \" +\n            \"srOpts: %o, receiverOpts: %O.\",\n          this._context.connectionId,\n          sropt,\n          rxopt\n        );\n        this._mgmtReqResLink = await RequestResponseLink.create(\n          this._context.connection,\n          sropt,\n          rxopt,\n          { abortSignal }\n        );\n        this._mgmtReqResLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.sender!.error!);\n          logger.verbose(\"[%s] An error occurred on the $management sender link.. %O\", id, ehError);\n        });\n        this._mgmtReqResLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.receiver!.error!);\n          logger.verbose(\n            \"[%s] An error occurred on the $management receiver link.. %O\",\n            id,\n            ehError\n          );\n        });\n        logger.verbose(\n          \"[%s] Created sender '%s' and receiver '%s' links for $management endpoint.\",\n          this._context.connectionId,\n          this._mgmtReqResLink.sender.name,\n          this._mgmtReqResLink.receiver.name\n        );\n        await this._ensureTokenRenewal();\n      }\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        `[${this._context.connectionId}] An error occured while establishing the $management links: ${translatedError?.name}: ${translatedError?.message}`\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Helper method to make the management request\n   * @param request - The AMQP message to send\n   * @param options - The options to use when sending a request over a $management link\n   */\n  private async _makeManagementRequest(\n    request: Message,\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n      requestName?: string;\n    } = {}\n  ): Promise<any> {\n    const retryOptions = options.retryOptions || {};\n    try {\n      const abortSignal: AbortSignalLike | undefined = options && options.abortSignal;\n\n      const sendOperationPromise = async (): Promise<Message> => {\n        let count = 0;\n\n        const retryTimeoutInMs = getRetryAttemptTimeoutInMs(options.retryOptions);\n        let timeTakenByInit = 0;\n\n        if (!this._isMgmtRequestResponseLinkOpen()) {\n          logger.verbose(\n            \"[%s] Acquiring lock to get the management req res link.\",\n            this._context.connectionId\n          );\n\n          const initOperationStartTime = Date.now();\n          try {\n            await defaultCancellableLock.acquire(\n              this.managementLock,\n              () => {\n                const acquireLockEndTime = Date.now();\n                const timeoutInMs =\n                  retryTimeoutInMs - (acquireLockEndTime - initOperationStartTime);\n                return this._init({ abortSignal, timeoutInMs });\n              },\n              { abortSignal, timeoutInMs: retryTimeoutInMs }\n            );\n          } catch (err) {\n            const translatedError = translate(err);\n            logger.warning(\n              \"[%s] An error occurred while creating the management link %s: %s\",\n              this._context.connectionId,\n              this.name,\n              `${translatedError?.name}: ${translatedError?.message}`\n            );\n            logErrorStackTrace(translatedError);\n            throw translatedError;\n          }\n          timeTakenByInit = Date.now() - initOperationStartTime;\n        }\n\n        const remainingOperationTimeoutInMs = retryTimeoutInMs - timeTakenByInit;\n\n        const sendRequestOptions: SendRequestOptions = {\n          abortSignal: options.abortSignal,\n          requestName: options.requestName,\n          timeoutInMs: remainingOperationTimeoutInMs\n        };\n\n        count++;\n        if (count !== 1) {\n          // Generate a new message_id every time after the first attempt\n          request.message_id = generate_uuid();\n        } else if (!request.message_id) {\n          // Set the message_id in the first attempt only if it is not set\n          request.message_id = generate_uuid();\n        }\n\n        return this._mgmtReqResLink!.sendRequest(request, sendRequestOptions);\n      };\n\n      const config: RetryConfig<Message> = Object.defineProperties(\n        {\n          operation: sendOperationPromise,\n          operationType: RetryOperationType.management,\n          abortSignal: abortSignal,\n          retryOptions: retryOptions\n        },\n        {\n          connectionId: {\n            enumerable: true,\n            get: () => {\n              return this._context.connectionId;\n            }\n          }\n        }\n      );\n      return (await retry<Message>(config)).body;\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"[%s] An error occurred during send on management request-response link with address '%s': %s\",\n        this._context.connectionId,\n        this.address,\n        `${translatedError?.name}: ${translatedError?.message}`\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  private _isMgmtRequestResponseLinkOpen(): boolean {\n    return this._mgmtReqResLink! && this._mgmtReqResLink!.isOpen();\n  }\n}\n"]}