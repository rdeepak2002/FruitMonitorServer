{"version":3,"file":"eventHubSender.js","sourceRoot":"","sources":["../../src/eventHubSender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuid } from \"uuid\";\nimport { logErrorStackTrace, logger } from \"./log\";\nimport {\n  AmqpError,\n  AwaitableSender,\n  AwaitableSenderOptions,\n  EventContext,\n  OnAmqpEvent,\n  message,\n  Message as RheaMessage\n} from \"rhea-promise\";\nimport {\n  delay,\n  ErrorNameConditionMapper,\n  RetryConfig,\n  RetryOperationType,\n  RetryOptions,\n  defaultCancellableLock,\n  retry,\n  translate\n} from \"@azure/core-amqp\";\nimport { EventData, toRheaMessage } from \"./eventData\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { LinkEntity } from \"./linkEntity\";\nimport { EventHubProducerOptions } from \"./models/private\";\nimport { SendOptions } from \"./models/public\";\nimport { getRetryAttemptTimeoutInMs } from \"./util/retries\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { EventDataBatch, isEventDataBatch } from \"./eventDataBatch\";\nimport { defaultDataTransformer } from \"./dataTransformer\";\n\n/**\n * Describes the EventHubSender that will send event data to EventHub.\n * @internal\n */\nexport class EventHubSender extends LinkEntity {\n  /**\n   * The unique lock name per connection that is used to acquire the\n   * lock for establishing a sender link by an entity on that connection.\n   * @readonly\n   */\n  readonly senderLock: string = `sender-${uuid()}`;\n  /**\n   * The handler function to handle errors that happen on the\n   * underlying sender.\n   * @readonly\n   */\n  private readonly _onAmqpError: OnAmqpEvent;\n  /**\n   * The handler function to handle \"sender_close\" event\n   * that happens on the underlying sender.\n   * @readonly\n   */\n  private readonly _onAmqpClose: OnAmqpEvent;\n  /**\n   * The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_error\" event.\n   */\n  private _onSessionError: OnAmqpEvent;\n  /**\n   * The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_close\" event.\n   */\n  private _onSessionClose: OnAmqpEvent;\n  /**\n   * The AMQP sender link.\n   */\n  private _sender?: AwaitableSender;\n\n  /**\n   * Creates a new EventHubSender instance.\n   * @hidden\n   * @param context - The connection context.\n   * @param partitionId - The EventHub partition id to which the sender\n   * wants to send the event data.\n   */\n  constructor(context: ConnectionContext, partitionId?: string) {\n    super(context, {\n      name: context.config.getSenderAddress(partitionId),\n      partitionId: partitionId\n    });\n    this.address = context.config.getSenderAddress(partitionId);\n    this.audience = context.config.getSenderAudience(partitionId);\n\n    this._onAmqpError = (eventContext: EventContext) => {\n      const senderError = eventContext.sender && eventContext.sender.error;\n      logger.verbose(\n        \"[%s] 'sender_error' event occurred on the sender '%s' with address '%s'. \" +\n          \"The associated error is: %O\",\n        this._context.connectionId,\n        this.name,\n        this.address,\n        senderError\n      );\n      // TODO: Consider rejecting promise in trySendBatch() or createBatch()\n    };\n\n    this._onSessionError = (eventContext: EventContext) => {\n      const sessionError = eventContext.session && eventContext.session.error;\n      logger.verbose(\n        \"[%s] 'session_error' event occurred on the session of sender '%s' with address '%s'. \" +\n          \"The associated error is: %O\",\n        this._context.connectionId,\n        this.name,\n        this.address,\n        sessionError\n      );\n      // TODO: Consider rejecting promise in trySendBatch() or createBatch()\n    };\n\n    this._onAmqpClose = async (eventContext: EventContext) => {\n      const sender = this._sender || eventContext.sender!;\n      logger.verbose(\n        \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s'. \" +\n          \"Value for isItselfClosed on the receiver is: '%s' \" +\n          \"Value for isConnecting on the session is: '%s'.\",\n        this._context.connectionId,\n        this.name,\n        this.address,\n        sender ? sender.isItselfClosed().toString() : undefined,\n        this.isConnecting\n      );\n      if (sender && !this.isConnecting) {\n        // Call close to clean up timers & other resources\n        await sender.close().catch((err) => {\n          logger.verbose(\n            \"[%s] Error when closing sender [%s] after 'sender_close' event: %O\",\n            this._context.connectionId,\n            this.name,\n            err\n          );\n        });\n      }\n    };\n\n    this._onSessionClose = async (eventContext: EventContext) => {\n      const sender = this._sender || eventContext.sender!;\n      logger.verbose(\n        \"[%s] 'session_close' event occurred on the session of sender '%s' with address '%s'. \" +\n          \"Value for isSessionItselfClosed on the session is: '%s' \" +\n          \"Value for isConnecting on the session is: '%s'.\",\n        this._context.connectionId,\n        this.name,\n        this.address,\n        sender ? sender.isSessionItselfClosed().toString() : undefined,\n        this.isConnecting\n      );\n      if (sender && !this.isConnecting) {\n        // Call close to clean up timers & other resources\n        await sender.close().catch((err) => {\n          logger.verbose(\n            \"[%s] Error when closing sender [%s] after 'session_close' event: %O\",\n            this._context.connectionId,\n            this.name,\n            err\n          );\n        });\n      }\n    };\n  }\n\n  /**\n   * Deletes the sender from the context. Clears the token renewal timer. Closes the sender link.\n   * @hidden\n   * @returns Promise<void>\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._sender) {\n        logger.info(\n          \"[%s] Closing the Sender for the entity '%s'.\",\n          this._context.connectionId,\n          this._context.config.entityPath\n        );\n        const senderLink = this._sender;\n        this._deleteFromCache();\n        await this._closeLink(senderLink);\n      }\n    } catch (err) {\n      const msg = `[${this._context.connectionId}] An error occurred while closing sender ${this.name}: ${err?.name}: ${err?.message}`;\n      logger.warning(msg);\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Determines whether the AMQP sender link is open. If open then returns true else returns false.\n   * @hidden\n   * @returns boolean\n   */\n  isOpen(): boolean {\n    const result = Boolean(this._sender && this._sender.isOpen());\n    logger.verbose(\n      \"[%s] Sender '%s' with address '%s' is open? -> %s\",\n      this._context.connectionId,\n      this.name,\n      this.address,\n      result\n    );\n    return result;\n  }\n  /**\n   * Returns maximum message size on the AMQP sender link.\n   * @param abortSignal - An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   * @returns Promise<number>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  async getMaxMessageSize(\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n    } = {}\n  ): Promise<number> {\n    const sender = await this._getLink(options);\n\n    return sender.maxMessageSize;\n  }\n\n  /**\n   * Send a batch of EventData to the EventHub. The \"message_annotations\",\n   * \"application_properties\" and \"properties\" of the first message will be set as that\n   * of the envelope (batch message).\n   * @hidden\n   * @param events -  An array of EventData objects to be sent in a Batch message.\n   * @param options - Options to control the way the events are batched along with request options\n   */\n  async send(\n    events: EventData[] | EventDataBatch,\n    options?: SendOptions & EventHubProducerOptions\n  ): Promise<void> {\n    try {\n      logger.info(\n        \"[%s] Sender '%s', trying to send EventData[].\",\n        this._context.connectionId,\n        this.name\n      );\n\n      let encodedBatchMessage: Buffer | undefined;\n      if (isEventDataBatch(events)) {\n        if (events.count === 0) {\n          logger.info(\n            `[${this._context.connectionId}] Empty batch was passsed. No events to send.`\n          );\n          return;\n        }\n        encodedBatchMessage = events._generateMessage();\n      } else {\n        if (events.length === 0) {\n          logger.info(`[${this._context.connectionId}] Empty array was passed. No events to send.`);\n          return;\n        }\n        const partitionKey = (options && options.partitionKey) || undefined;\n        const messages: RheaMessage[] = [];\n        // Convert EventData to RheaMessage.\n        for (let i = 0; i < events.length; i++) {\n          const rheaMessage = toRheaMessage(events[i], partitionKey);\n          rheaMessage.body = defaultDataTransformer.encode(events[i].body);\n          messages[i] = rheaMessage;\n        }\n        // Encode every amqp message and then convert every encoded message to amqp data section\n        const batchMessage: RheaMessage = {\n          body: message.data_sections(messages.map(message.encode))\n        };\n\n        // Set message_annotations of the first message as\n        // that of the envelope (batch message).\n        if (messages[0].message_annotations) {\n          batchMessage.message_annotations = messages[0].message_annotations;\n        }\n\n        // Finally encode the envelope (batch message).\n        encodedBatchMessage = message.encode(batchMessage);\n      }\n      logger.info(\n        \"[%s] Sender '%s', sending encoded batch message.\",\n        this._context.connectionId,\n        this.name,\n        encodedBatchMessage\n      );\n      return await this._trySendBatch(encodedBatchMessage, options);\n    } catch (err) {\n      logger.warning(\n        `An error occurred while sending the batch message ${err?.name}: ${err?.message}`\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  private _deleteFromCache(): void {\n    this._sender = undefined;\n    delete this._context.senders[this.name];\n    logger.verbose(\n      \"[%s] Deleted the sender '%s' with address '%s' from the client cache.\",\n      this._context.connectionId,\n      this.name,\n      this.address\n    );\n  }\n\n  private _createSenderOptions(timeoutInMs: number, newName?: boolean): AwaitableSenderOptions {\n    if (newName) this.name = `${uuid()}`;\n    const srOptions: AwaitableSenderOptions = {\n      name: this.name,\n      target: {\n        address: this.address\n      },\n      onError: this._onAmqpError,\n      onClose: this._onAmqpClose,\n      onSessionError: this._onSessionError,\n      onSessionClose: this._onSessionClose,\n      sendTimeoutInSeconds: timeoutInMs / 1000\n    };\n    logger.verbose(\"Creating sender with options: %O\", srOptions);\n    return srOptions;\n  }\n\n  /**\n   * Tries to send the message to EventHub if there is enough credit to send them\n   * and the circular buffer has available space to settle the message after sending them.\n   *\n   * We have implemented a synchronous send over here in the sense that we shall be waiting\n   * for the message to be accepted or rejected and accordingly resolve or reject the promise.\n   * @hidden\n   * @param rheaMessage - The message to be sent to EventHub.\n   * @returns Promise<void>\n   */\n  private async _trySendBatch(\n    rheaMessage: RheaMessage | Buffer,\n    options: SendOptions & EventHubProducerOptions = {}\n  ): Promise<void> {\n    const abortSignal: AbortSignalLike | undefined = options.abortSignal;\n    const retryOptions = options.retryOptions || {};\n    const timeoutInMs = getRetryAttemptTimeoutInMs(retryOptions);\n    retryOptions.timeoutInMs = timeoutInMs;\n\n    const sendEventPromise = async (): Promise<void> => {\n      const initStartTime = Date.now();\n      const sender = await this._getLink(options);\n      const timeTakenByInit = Date.now() - initStartTime;\n      logger.verbose(\n        \"[%s] Sender '%s', credit: %d available: %d\",\n        this._context.connectionId,\n        this.name,\n        sender.credit,\n        sender.session.outgoing.available()\n      );\n\n      let waitTimeForSendable = 1000;\n      if (!sender.sendable() && timeoutInMs - timeTakenByInit > waitTimeForSendable) {\n        logger.verbose(\n          \"%s Sender '%s', waiting for 1 second for sender to become sendable\",\n          this._context.connectionId,\n          this.name\n        );\n\n        await delay(waitTimeForSendable);\n\n        logger.verbose(\n          \"%s Sender '%s' after waiting for a second, credit: %d available: %d\",\n          this._context.connectionId,\n          this.name,\n          sender.credit,\n          sender.session?.outgoing?.available()\n        );\n      } else {\n        waitTimeForSendable = 0;\n      }\n\n      if (!sender.sendable()) {\n        // let us retry to send the message after some time.\n        const msg =\n          `[${this._context.connectionId}] Sender \"${this.name}\", ` +\n          `cannot send the message right now. Please try later.`;\n        logger.warning(msg);\n        const amqpError: AmqpError = {\n          condition: ErrorNameConditionMapper.SenderBusyError,\n          description: msg\n        };\n        throw translate(amqpError);\n      }\n\n      logger.verbose(\n        \"[%s] Sender '%s', sending message with id '%s'.\",\n        this._context.connectionId,\n        this.name\n      );\n      if (timeoutInMs <= timeTakenByInit + waitTimeForSendable) {\n        const desc: string =\n          `${this._context.connectionId} Sender \"${this.name}\" ` +\n          `with address \"${this.address}\", was not able to send the message right now, due ` +\n          `to operation timeout.`;\n        logger.warning(desc);\n        const e: AmqpError = {\n          condition: ErrorNameConditionMapper.ServiceUnavailableError,\n          description: desc\n        };\n        throw translate(e);\n      }\n\n      sender.sendTimeoutInSeconds = (timeoutInMs - timeTakenByInit - waitTimeForSendable) / 1000;\n      try {\n        const delivery = await sender.send(rheaMessage, undefined, 0x80013700, {\n          abortSignal\n        });\n        logger.info(\n          \"[%s] Sender '%s', sent message with delivery id: %d\",\n          this._context.connectionId,\n          this.name,\n          delivery.id\n        );\n      } catch (err) {\n        throw err.innerError || err;\n      }\n    };\n\n    const config: RetryConfig<void> = {\n      operation: sendEventPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.sendMessage,\n      abortSignal: abortSignal,\n      retryOptions: retryOptions\n    };\n\n    try {\n      await retry<void>(config);\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"[%s] Sender '%s', An error occurred while sending the message %s\",\n        this._context.connectionId,\n        this.name,\n        `${translatedError?.name}: ${translatedError?.message}`\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  private async _getLink(\n    options: {\n      retryOptions?: RetryOptions;\n      abortSignal?: AbortSignalLike;\n    } = {}\n  ): Promise<AwaitableSender> {\n    if (this.isOpen() && this._sender) {\n      return this._sender;\n    }\n    const retryOptions = options.retryOptions || {};\n    const timeoutInMs = getRetryAttemptTimeoutInMs(retryOptions);\n    retryOptions.timeoutInMs = timeoutInMs;\n    const senderOptions = this._createSenderOptions(timeoutInMs);\n\n    const startTime = Date.now();\n    const createLinkPromise = async (): Promise<AwaitableSender> => {\n      return defaultCancellableLock.acquire(\n        this.senderLock,\n        () => {\n          const taskStartTime = Date.now();\n          const taskTimeoutInMs = timeoutInMs - (taskStartTime - startTime);\n          return this._init({\n            ...senderOptions,\n            abortSignal: options.abortSignal,\n            timeoutInMs: taskTimeoutInMs\n          });\n        },\n        { abortSignal: options.abortSignal, timeoutInMs: timeoutInMs }\n      );\n    };\n\n    const config: RetryConfig<AwaitableSender> = {\n      operation: createLinkPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.senderLink,\n      abortSignal: options.abortSignal,\n      retryOptions: retryOptions\n    };\n\n    try {\n      return await retry<AwaitableSender>(config);\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"[%s] An error occurred while creating the sender %s: %s\",\n        this._context.connectionId,\n        this.name,\n        `${translatedError?.name}: ${translatedError?.message}`\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Initializes the sender session on the connection.\n   * Should only be called from _createLinkIfNotOpen\n   * @hidden\n   */\n  private async _init(\n    options: AwaitableSenderOptions & {\n      abortSignal: AbortSignalLike | undefined;\n      timeoutInMs: number;\n    }\n  ): Promise<AwaitableSender> {\n    try {\n      if (!this.isOpen() || !this._sender) {\n        // Wait for the connectionContext to be ready to open the link.\n        await this._context.readyToOpenLink();\n        await this._negotiateClaim({\n          setTokenRenewal: false,\n          abortSignal: options.abortSignal,\n          timeoutInMs: options.timeoutInMs\n        });\n\n        logger.verbose(\n          \"[%s] Trying to create sender '%s'...\",\n          this._context.connectionId,\n          this.name\n        );\n\n        const sender = await this._context.connection.createAwaitableSender(options);\n        this._sender = sender;\n        logger.verbose(\n          \"[%s] Sender '%s' created with sender options: %O\",\n          this._context.connectionId,\n          this.name,\n          options\n        );\n        sender.setMaxListeners(1000);\n\n        // It is possible for someone to close the sender and then start it again.\n        // Thus make sure that the sender is present in the client cache.\n        if (!this._context.senders[this.name]) this._context.senders[this.name] = this;\n        this._ensureTokenRenewal();\n        return sender;\n      } else {\n        logger.verbose(\n          \"[%s] The sender '%s' with address '%s' is open -> %s. Hence not reconnecting.\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          this.isOpen()\n        );\n        return this._sender;\n      }\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"[%s] An error occurred while creating the sender %s: %s\",\n        this._context.connectionId,\n        this.name,\n        `${translatedError?.name}: ${translatedError?.message}`\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Creates a new sender to the given event hub, and optionally to a given partition if it is\n   * not present in the context or returns the one present in the context.\n   * @hidden\n   * @param partitionId - Partition ID to which it will send event data.\n   */\n  static create(context: ConnectionContext, partitionId?: string): EventHubSender {\n    const ehSender: EventHubSender = new EventHubSender(context, partitionId);\n    if (!context.senders[ehSender.name]) {\n      context.senders[ehSender.name] = ehSender;\n    }\n    return context.senders[ehSender.name];\n  }\n}\n"]}